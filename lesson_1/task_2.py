'''
2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака.
Объяснить полученный результат.

При выполнение логических побитных операций, два числа представляются в двоичной форме,
после чего происходит логическая операция с каждым битом представленных чисел
При использовании операции смещения вправо, биты числа смещаются вправо, при этом смещаемые биты
в конце обрезаются, а впереди добавляются нули, количество которых равно заданному смещению
При использовании операции смещения влево, биты представленного числа смещаются влево, при этом в конце добавляются
нули, количество которых равно заданному смещению
'''

def bitwise_op(A, B):
    print(f'Логические побитные операции с числами {A} и {B}:')
    print(f'* Операция AND\n'
          f'* {A} - {bin(A)[2:]}, {B} - {bin(B)[2:]},\nРезультат {A&B} - {bin(A&B)[2:]}')
    print(f'* Операция OR\n'
          f'* {A} - {bin(A)[2:]}, {B} - {bin(B)[2:]},\nРезультат {A|B} - {bin(A|B)[2:]}')
    print(f'* Операция XOR\n'
          f'* {A} - {bin(A)[2:]}, {B} - {bin(B)[2:]},\nРезультат  {A^B} - {bin(A^B)[2:]}')
    print(f'* Операции побитного смещения влево или вправо с числом {A}')
    A_right = A >> 2
    A_left = A << 2
    print(f'Число {A} в двочном виде: {A:b}')
    # решила здесь потрудиться с выводом,
    # чтобы всегда отображалось соответствующее число разрядов для наглядности демонстрации смещения битов
    print(f'Смещение вправо: {"0"*(len(bin(A_left)[2:]) - len(bin(A_right)[2:]))}{A_right:b} (число {A_right}),\n'
          f'Смещение влево: {A_left:b} (число {A_left})')

bitwise_op(5,6)
print(100*'*')
bitwise_op(23,78)